function settings_fcn = acqiris_settings_gui(parent, left, bottom, settings)
% ACQIRIS_SETTINGS_GUID
%-------------------------------------------------------------------------------
% File name   : acqiris_settings_guid.m       
% Generated on: 05-Oct-2010 14:11:12          
% Description :
%-------------------------------------------------------------------------------

% Copyright 2010 Raytheon BBN Technologies
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.


% Initialize handles structure
handles = struct();

% if there is no parent figure given, generate one
if nargin < 1 || ~isnumeric(parent)
	handles.figure1 = figure( ...
			'Tag', 'figure1', ...
			'Units', 'characters', ...
			'Position', [103.833333333333 13.8571428571429 55 46], ...
			'Name', 'acqiris_settings', ...
			'MenuBar', 'none', ...
			'NumberTitle', 'off', ...
			'Color', get(0,'DefaultUicontrolBackgroundColor'));
	
	left = 1.0;
	bottom = 0.5;
else
	handles.figure1 = figure(parent);
end

% instrument specific parameters
cardModes = containers.Map({'Digitizer', 'Averager'}, {0, 2});
clockTypes = containers.Map({'Internal','External', 'Ext Ref (10 MHz)'}, {'int', 'ext', 'ref'});
scales = containers.Map({'50m','100m', '200m', '500m', '1', '2', '5'}, {.05, .1, .2, .5, 1, 2, 5});
vert_couplings = containers.Map({'Ground','DC, 1 MOhm','AC, 1 MOhm','DC, 50 Ohm','AC, 50 Ohm'}, ...
			{0,1,2,3,4});
bandwidths = containers.Map({'no limit','700 MHz','200 MHz','35 MHz','25 MHz','20 MHz'}, ...
			{0,2,3,5,1,4});
trigChannels = containers.Map({'External','Ch 1', 'Ch 2'}, {-1, 1, 2});
trigCouplings = containers.Map({'DC','AC','DC, 50 Ohm','AC, 50 Ohm'},{0,1,3,4});
trigSlopes = containers.Map({'Rising','Falling'},{0,1});
resyncs = containers.Map({'Resync','No resync'},{1,0});

% Create all UI controls
build_gui();

if nargin < 4
	settings = struct();
end
set_defaults(settings);

settings_fcn = @get_settings;

%% ---------------------------------------------------------------------------
	function build_gui()
% Creation of all uicontrols

		% --- PANELS -------------------------------------
		handles.uipanel0 = uipanel( ...
			'Parent', handles.figure1, ...
			'Tag', 'uipanel_acqiris_settings', ...
			'Units', 'pixels', ...
			'Position', [left bottom 315 630], ...
			'FontSize', 10, ...
			'Title', 'Acqiris Settings');
		
		handles.uipanel1 = uipanel( ...
			'Parent', handles.uipanel0, ...
			'Tag', 'uipanel_base_settings', ...
			'Units', 'characters', ...
			'Position', [1 1 50.1666666666667 27], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'Title', 'Base Settings');

		handles.uipanel2 = uipanel( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'uipanel_trigger_settings', ...
			'Units', 'characters', ...
			'Position', [0.8 1.23076923076923 48 8.53846153846154], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'Title', 'Trigger Settings');

		handles.uipanel3 = uipanel( ...
			'Parent', handles.uipanel0, ...
			'Tag', 'uipanel_averager_settings', ...
			'Units', 'characters', ...
			'Position', [1 28.5 50.1666666666667 11.6428571428571], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'Title', 'Averager Settings');

		% --- STATIC TEXTS -------------------------------------
		handles.text1 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text1', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [12.3333333333333 14.7857142857143 12 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Bandwidth');

		handles.text2 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text2', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [9.49999999999999 23.5714285714286 14.6666666666667 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Full scale (V)');

		handles.text3 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text3', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [13.8 20.543956043956 10.4 1.15384615384615], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Offset (V)');

		handles.text4 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text4', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [12.5 17.7142857142857 11.8333333333333 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Coupling', ...
			'HorizontalAlignment', 'right');

		handles.text5 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text5', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [10 11.8571428571429 14.1666666666667 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Channel', ...
			'HorizontalAlignment', 'right');

		handles.text6 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text6', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [27 23.3571428571428 11 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Samples');

		handles.text7 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text7', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [27 14.6428571428571 13 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Segments', ...
			'HorizontalAlignment', 'left');

		handles.text8 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text8', ...
			'UserData', zeros(1,0), ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [27 20.4615384615385 13.8 1.15384615384615], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Delay time (s)', ...
			'HorizontalAlignment', 'left');

		handles.text9 = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'text9', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [27 17.5384615384615 20.4 1.15384615384615], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Sampling interval (s)', ...
			'HorizontalAlignment', 'left');

		handles.text10 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text10', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [26.2 2.69230769230771 16.6 1.15384615384615], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Trigger Ch');

		handles.text11 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text11', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [26.2 5.6923076923077 16 1.15384615384615], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Trigger coupling');

		handles.text12 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text12', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [4.4 5.6923076923077 18 1.15384615384615], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Trigger level (mV)');

		handles.text13 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text13', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [6.16666666666667 2.71428571428571 16.3333333333333 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Trigger slope');

		handles.text14 = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'text14', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [6.33333333333333 8.88461538461538 16.8333333333333 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Waveforms', ...
			'HorizontalAlignment', 'right');

		handles.text15 = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'text15', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [25.8333333333333 8.88461538461538 20 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Round robins', ...
			'HorizontalAlignment', 'left');

		handles.text16 = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'text16', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [2.83333333333333 5.88461538461538 12.1666666666667 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Clock type', ...
			'HorizontalAlignment', 'left');

		handles.text17 = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'text17', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [2.83333333333333 2.88461538461538 14.8333333333333 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Trigger resync', ...
			'HorizontalAlignment', 'left');

		handles.text18 = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'text18', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [25.6666666666667 5.95604395604395 20.3333333333333 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Dither range', ...
			'HorizontalAlignment', 'left');

		handles.text19 = uicontrol( ...
			'Parent', handles.uipanel0, ...
			'Tag', 'text19', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [1 42.5 19.8333333333333 1.14285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'String', 'Card mode', ...
			'HorizontalAlignment', 'left');

		% --- EDIT TEXTS -------------------------------------
		handles.offset = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'offset', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [11.4 19 12.8 1.46153846153846], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '0.0', ...
			'HorizontalAlignment', 'right');

		handles.nbrSegments = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'nbrSegments', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [27 12.9230769230769 12.8 1.53846153846154], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1', ...
			'HorizontalAlignment', 'right');

		handles.record_length = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'record_length', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [27 21.7692307692308 12.8 1.46153846153846], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '10000', ...
			'HorizontalAlignment', 'right');

		handles.delayTime = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'delayTime', ...
			'UserData', zeros(1,0), ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [27 18.8461538461538 12.8 1.46153846153846], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '0.0e-6', ...
			'HorizontalAlignment', 'right');

		handles.sampleInterval = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'sampleInterval', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [27 15.9230769230769 12.8 1.46153846153846], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1e-9', ...
			'HorizontalAlignment', 'right');

		handles.trigger_level = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'trigger_level', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [2.4 3.92307692307693 20 1.69230769230769], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '500', ...
			'HorizontalAlignment', 'right');

		handles.nbrWaveforms = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'nbrWaveforms', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [2.66666666666667 7.24175824175824 20.1666666666667 1.42857142857143], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '10000', ...
			'HorizontalAlignment', 'right');

		handles.nbrRoundRobins = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'nbrRoundRobins', ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [25.8333333333333 7.24175824175824 20 1.42857142857143], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1', ...
			'HorizontalAlignment', 'right');

		handles.ditherRange = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'ditherRange', ...
			'UserData', zeros(1,0), ...
			'Style', 'edit', ...
			'Units', 'characters', ...
			'Position', [25.6666666666667 4.24175824175824 20.3333333333333 1.42857142857143], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', '0', ...
			'HorizontalAlignment', 'right');

		% --- POPUP MENU -------------------------------------
		handles.acquire_mode = uicontrol( ...
			'Parent', handles.uipanel0, ...
			'Tag', 'acquire_mode', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [1 40.75 20 1.71428571428571], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(cardModes));

		handles.trigger_ch = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'trigger_ch', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [26.2 0.923076923076925 20 1.69230769230769], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(trigChannels));

		handles.trigger_coupling = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'trigger_coupling', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [26.2 3.92307692307693 20 1.69230769230769], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(trigCouplings));

		handles.trigger_slope = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'trigger_slope', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [2.4 0.923076923076925 20 1.69230769230769], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(trigSlopes));

        % order scale choices by the numerical values
        scaleNames = keys(scales);
        [~, scaleOrder] = sort(cell2mat(values(scales)));
		handles.vert_scale = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'vert_scale', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [3.83333333333333 21.7857142857143 20.1666666666667 1.64285714285714], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', scaleNames(scaleOrder));

		handles.bandwidth = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'bandwidth', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [3.8 13.0769230769231 20.4 1.61538461538462], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(bandwidths));

		handles.vert_coupling = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'vert_coupling', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [4 16 20.2 1.61538461538462], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(vert_couplings));

		handles.channel = uicontrol( ...
			'Parent', handles.uipanel1, ...
			'Tag', 'channel', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [3.8 10.1538461538462 20.4 1.61538461538462], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', {'Both','1','2'});

		handles.clockType = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'clockType', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [2.83333333333333 4.09890109890109 20 1.71428571428571], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(clockTypes));

		handles.trigResync = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'trigResync', ...
			'Style', 'popupmenu', ...
			'Units', 'characters', ...
			'Position', [2.83333333333333 1.09890109890109 20 1.71428571428571], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', keys(resyncs));


	end

	function selected = get_selected(hObject)
		menu = get(hObject,'String');
		selected = menu{get(hObject,'Value')};
	end

	function set_selected(hObject, val)
		menu = get(hObject, 'String');
		index = find(strcmp(val, menu));
		if ~isempty(index)
			set(hObject, 'Value', index);
		end
	end

	function scope_settings = get_settings()
		
		scope_settings = struct();
		
		scope_settings.deviceName = 'AgilentAP120';
		scope_settings.Address = 'PCI::INSTR0';

		% set card mode
		scope_settings.acquire_mode = cardModes(get_selected(handles.acquire_mode));
        scope_settings.clockType = clockTypes(get_selected(handles.clockType));

		% set horizontal settings
		horizSettings.delayTime = str2num(get(handles.delayTime, 'String'));
		horizSettings.sampleInterval = str2num(get(handles.sampleInterval, 'String'));
		%disp(horizSettings);
		scope_settings.horizontal = horizSettings;

		% set vertical settings
		vertSettings.vert_scale = scales(get_selected(handles.vert_scale));
		vertSettings.offset = str2num(get(handles.offset,'String'));
		vertSettings.vert_coupling = vert_couplings(get_selected(handles.vert_coupling));
		vertSettings.bandwidth = bandwidths(get_selected(handles.bandwidth));
		%disp(vertSettings);
		scope_settings.vertical = vertSettings;

		% set trigger settings
		trigSettings.trigger_level = str2num(get(handles.trigger_level,'String'));
		trigSettings.trigger_ch = trigChannels(get_selected(handles.trigger_ch));
		trigSettings.trigger_coupling = trigCouplings(get_selected(handles.trigger_coupling));
		trigSettings.trigger_slope = trigSlopes(get_selected(handles.trigger_slope));
		%disp(trigSettings);
		scope_settings.trigger = trigSettings;

		% set averager settings
		avgSettings.record_length = str2num(get(handles.record_length,'String'));
		avgSettings.nbrSegments = str2num(get(handles.nbrSegments,'String'));
		avgSettings.nbrWaveforms = str2num(get(handles.nbrWaveforms,'String'));
		avgSettings.nbrRoundRobins = str2num(get(handles.nbrRoundRobins,'String'));
		avgSettings.ditherRange = str2num(get(handles.ditherRange,'String'));
		avgSettings.trigResync = resyncs(get_selected(handles.trigResync));

		%disp(avgSettings);
		%scope_settings.channel_on = 1;
		scope_settings.averager = avgSettings;
	end

	function set_defaults(settings)
		% define default values for fields. If given a settings structure, grab
		% defaults from it
		defaults = struct();
		defaults.acquire_mode = 'Averager';
        defaults.clockType = 'Ext Ref (10 MHz)';
		defaults.horizontal.delayTime = 0;
		defaults.horizontal.sampleInterval = 1e-9;
		defaults.vertical.vert_scale = '500m';
		defaults.vertical.offset = 0;
		defaults.vertical.vert_coupling = 'DC, 50 Ohm';
		defaults.vertical.bandwidth = 'no limit';
		defaults.trigger.trigger_level = 500;
		defaults.trigger.trigger_ch = 'External';
		defaults.trigger.trigger_coupling = 'DC';
		defaults.trigger.trigger_slope = 'Rising';
		defaults.averager.record_length = 10000;
		defaults.averager.nbrSegments = 1;
		defaults.averager.nbrWaveforms = 1000;
		defaults.averager.nbrRoundRobins = 1;
		defaults.averager.ditherRange = 0;
		defaults.averager.trigResync = 'Resync';

		% construct inverse maps
		cardModesInv = invertMap(cardModes);
        clockTypesInv = invertMap(clockTypes);
		scalesInv = invertMap(scales);
		vert_couplingsInv = invertMap(vert_couplings);
		bandwidthsInv = invertMap(bandwidths);
		trigChannelsInv = invertMap(trigChannels);
		trigCouplingsInv = invertMap(trigCouplings);
		trigSlopesInv = invertMap(trigSlopes);
		resyncsInv = invertMap(resyncs);
		% scope settings are two layers deep, need to go into horizontal,
		% vertical, trigger, and averager
		if ~isempty(fieldnames(settings))
			defaults.acquire_mode = cardModesInv(settings.acquire_mode);
            defaults.clockType = clockTypesInv(settings.clockType);
			% horizontal
			defaults.horizontal.delayTime = settings.horizontal.delayTime;
			defaults.horizontal.sampleInterval = settings.horizontal.sampleInterval;
            % vertical
			defaults.vertical.vert_scale = scalesInv(settings.vertical.vert_scale);
			defaults.vertical.offset = settings.vertical.offset;
			defaults.vertical.vert_coupling = vert_couplingsInv(settings.vertical.vert_coupling);
			defaults.vertical.bandwidth = bandwidthsInv(settings.vertical.bandwidth);
            % trigger
			defaults.trigger.trigger_level = settings.trigger.trigger_level;
			defaults.trigger.trigger_ch = trigChannelsInv(settings.trigger.trigger_ch);
			defaults.trigger.trigger_coupling = trigCouplingsInv(settings.trigger.trigger_coupling);
			defaults.trigger.trigger_slope = trigSlopesInv(settings.trigger.trigger_slope);
            % averaging
			defaults.averager.record_length = settings.averager.record_length;
			defaults.averager.nbrSegments = settings.averager.nbrSegments;
			defaults.averager.nbrWaveforms = settings.averager.nbrWaveforms;
			defaults.averager.nbrRoundRobins = settings.averager.nbrRoundRobins;
			defaults.averager.ditherRange = settings.averager.ditherRange;
			defaults.averager.trigResync = resyncsInv(settings.averager.trigResync);
		end
		
		% depth first traversal of defaults using a stack
		s = stack();
		% push a cell array of the name and defaults onto the stack
		s.push({'' defaults});

		while ~s.isempty()
			u = s.pop();
			name = u{1};
			value = u{2};

			% if current element is itself a struct, add all its children to the
			% stack
			if isstruct(value)
				elementNames = fieldnames(value);
				len = numel(elementNames);
				for i = len:-1:1
					s.push( {elementNames{i} value.(elementNames{i})} );
				end
			elseif isfield(handles, name)
				% strip everything before the last dot to get the handle
				switch get(handles.(name), 'Style')
					case 'edit'
						set(handles.(name), 'String', num2str(value));
					case 'popupmenu'
						set_selected(handles.(name), value);
					case 'checkbox'
						set(handles.(name), 'Value', value);
					case 'radiobutton'
						set(handles.(name), 'Value', value);
					otherwise
						warning('unknown handle type');
				end
			end
		end
		
	end

end
