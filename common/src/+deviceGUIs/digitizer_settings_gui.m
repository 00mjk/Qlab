function settings_fcn = digitizer_settings_gui(parent, left, bottom, settings)
% DIGITIZER_SETTINGS_GUID
%-------------------------------------------------------------------------------
% File name   : acqiris_settings_guid.m
% Generated on: 12 Dec. 2011
% Description : A GUI for setting the paramters of a digitizer card
%               Based of acqiris_settings_gui from Blake Johnson
% Author: Colm Ryan
%-------------------------------------------------------------------------------

% Copyright 2010 Raytheon BBN Technologies
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.

% Initialize handles structure
handles = struct();

% If there is no parent figure given, generate a new one
if nargin < 1 || ~isnumeric(parent)
    handles.figure1 = figure( ...
        'Tag', 'figure1', ...
        'Units', 'characters', ...
        'Position', [103.833333333333 13.8571428571429 65 50], ...
        'Name', 'Digitizer Settings', ...
        'MenuBar', 'none', ...
        'NumberTitle', 'off', ...
        'Color', get(0,'DefaultUicontrolBackgroundColor'));
    
    left = 1.0;
    bottom = 0.5;
    %Otherwise we are placed into a parent window so grab a handle to that
else
    handles.figure1 = figure(parent);
end

% Instrument allowable parameters and mapping to API parameters
% These are specific to the particular digitizer card and used for
% drop-down menus.  Here we simply initialize empty maps and then a nested
% function fills them out depending on the card choice.
cardParams = struct();
%Whether the card performs on-board averaging
cardParams.cardModes = containers.Map();
%How the digitizer is clocked: internal, external, or 10MHz reference into
%PLL
cardParams.clockTypes = containers.Map();
%Vertical scaling
cardParams.scales = containers.Map();
%AC/DC coupling and impedence
cardParams.vert_couplings = containers.Map();
%The on-board filtering for bandwidth
cardParams.bandwidths = containers.Map();
%Which channel is used for triggering
cardParams.trigChannels = containers.Map();
%How the trigger channel is coupled
cardParams.trigCouplings = containers.Map();
%The slope of the trigger: rising/falling.
cardParams.trigSlopes = containers.Map();
%How the syncs????
cardParams.resyncs = containers.Map();

%Setup a dictionary linking these parameters to UI tags for the pop-up
%menus
cardParamsUIDict = containers.Map();
cardParamsUIDict('acquire_mode') = 'cardModes';
cardParamsUIDict('clockType') = 'clockTypes';
cardParamsUIDict('vert_scale') = 'scales';
cardParamsUIDict('vert_coupling') = 'vert_couplings';
cardParamsUIDict('bandwidth') = 'bandwidths';
cardParamsUIDict('trigger_ch') = 'trigChannels';
cardParamsUIDict('trigger_coupling') = 'trigCouplings';
cardParamsUIDict('trigger_slope') = 'trigSlopes';
cardParamsUIDict('trigResync') = 'resyncs';


% Call a subfunction to create all UI controls
build_gui();

%If we are not passed explicit settings then create an emtpy structure
if nargin < 4
    settings = struct();
end

%Update the GUI elements with the available choice for the given digitizer
%card and the current settings
card_switch()

%Return a function handle to the subfunction which returns all the current
%settings
settings_fcn = @get_settings;

%% ---------------------------------------------------------------------------
%Main function layout all the GUI elements
    function build_gui()
        % Creation of all uicontrols
        
        %Create the panels
        create_panels()
        
        %Create the static text areas
        create_static_text()
        
        %Create the editable text areas
        create_edit_text()
        
        %Create the pop-up-menus
        create_popupmenus()
        
        
        function create_panels()
            
            %Main panel containing everything
            handles.uipanel0 = uipanel( ...
                'Parent', handles.figure1, ...
                'Tag', 'uipanel_acqiris_settings', ...
                'Units', 'pixels', ...
                'Position', [left bottom 315 630], ...
                'FontSize', 10, ...
                'Title', 'Digitizer Settings');
            
            %Panel for acquisition settings
            handles.uipanel1 = uipanel( ...
                'Parent', handles.uipanel0, ...
                'Tag', 'uipanel_base_settings', ...
                'Units', 'characters', ...
                'Position', [1 1 60 27], ...
                'FontName', 'Helvetica', ...
                'FontSize', 10, ...
                'Title', 'Base Settings');
            
            %Panel for the trigger settings
            handles.uipanel2 = uipanel( ...
                'Parent', handles.uipanel1, ...
                'Tag', 'uipanel_trigger_settings', ...
                'Units', 'characters', ...
                'Position', [0.8 1.23076923076923 55 8.53846153846154], ...
                'FontName', 'Helvetica', ...
                'FontSize', 10, ...
                'Title', 'Trigger Settings');
            
            %Panel for the averaging settings
            handles.uipanel3 = uipanel( ...
                'Parent', handles.uipanel0, ...
                'Tag', 'uipanel_averager_settings', ...
                'Units', 'characters', ...
                'Position', [1 28.5 60 11.6428571428571], ...
                'FontName', 'Helvetica', ...
                'FontSize', 10, ...
                'Title', 'Averager Settings');
        end
        
        function create_static_text()
            defaults = {'Style','text','Units','characters','FontName','Helvetica','FontSize',10};
            handles.text1 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text1', ...
                'Position', [12.3333333333333 14.7857142857143 12 1.14285714285714], ...
                'String', 'Bandwidth');
            
            handles.text2 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text2', ...
                'Position', [9.49999999999999 23.5714285714286 14.6666666666667 1.14285714285714], ...
                'String', 'Full scale (V)');
            
            handles.text3 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text3', ...
                'Position', [13.8 20.543956043956 10.4 1.15384615384615], ...
                'String', 'Offset (V)');
            
            handles.text4 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text4', ...
                'Position', [12.5 17.7142857142857 11.8333333333333 1.14285714285714], ...
                'String', 'Coupling', ...
                'HorizontalAlignment', 'right');
            
            handles.text5 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text5', ...
                'Position', [10 11.8571428571429 14.1666666666667 1.14285714285714], ...
                'String', 'Channel', ...
                'HorizontalAlignment', 'right');
            
            handles.text6 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text6', ...
                'Position', [30 23.3571428571428 11 1.14285714285714], ...
                'String', 'Samples');
            
            handles.text7 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text7', ...
                'Position', [30 14.6428571428571 13 1.14285714285714], ...
                'String', 'Segments', ...
                'HorizontalAlignment', 'left');
            
            handles.text8 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text8', ...
                'UserData', zeros(1,0), ...
                'Position', [30 20.4615384615385 13.8 1.15384615384615], ...
                'String', 'Delay time (s)', ...
                'HorizontalAlignment', 'left');
            
            handles.text9 = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'text9', ...
                'Position', [30 17.5384615384615 20.4 1.15384615384615], ...
                'String', 'Sampling interval (s)', ...
                'HorizontalAlignment', 'left');
            
            handles.text10 = uicontrol( defaults{:},...
                'Parent', handles.uipanel2, ...
                'Tag', 'text10', ...
                'Position', [25 2.69230769230771 20 1.15384615384615], ...
                'String', 'Trigger Ch');
            
            handles.text11 = uicontrol( defaults{:},...
                'Parent', handles.uipanel2, ...
                'Tag', 'text11', ...
                'Position', [25 5.6923076923077 25 1.15384615384615], ...
                'String', 'Trigger coupling');
            
            handles.text12 = uicontrol( defaults{:},...
                'Parent', handles.uipanel2, ...
                'Tag', 'text12', ...
                'Position', [4.4 5.6923076923077 21 1.15384615384615], ...
                'String', 'Trigger level (mV)');
            
            handles.text13 = uicontrol( defaults{:},...
                'Parent', handles.uipanel2, ...
                'Tag', 'text13', ...
                'Position', [6.16666666666667 2.71428571428571 16.3333333333333 1.14285714285714], ...
                'String', 'Trigger slope');
            
            handles.text14 = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'text14', ...
                'Position', [6.33333333333333 8.88461538461538 16.8333333333333 1.14285714285714], ...
                'String', 'Waveforms', ...
                'HorizontalAlignment', 'right');
            
            handles.text15 = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'text15', ...
                'Position', [25.8333333333333 8.88461538461538 20 1.14285714285714], ...
                'String', 'Round robins', ...
                'HorizontalAlignment', 'left');
            
            handles.text16 = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'text16', ...
                'Position', [2.83333333333333 5.88461538461538 12.1666666666667 1.14285714285714], ...
                'String', 'Clock type', ...
                'HorizontalAlignment', 'left');
            
            handles.text17 = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'text17', ...
                'Position', [2.83333333333333 2.88461538461538 14.8333333333333 1.14285714285714], ...
                'String', 'Trigger resync', ...
                'HorizontalAlignment', 'left');
            
            handles.text18 = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'text18', ...
                'Position', [25.6666666666667 5.95604395604395 20.3333333333333 1.14285714285714], ...
                'String', 'Dither range', ...
                'HorizontalAlignment', 'left');
            
            handles.text19 = uicontrol( defaults{:}, ...
                'Parent', handles.uipanel0, ...
                'Tag', 'text19', ...
                'Position', [1 42.5 19.8333333333333 1.14285714285714], ...
                'String', 'Card mode', ...
                'HorizontalAlignment', 'left');
            
            handles.text20 = uicontrol( defaults{:},...
                'Parent', handles.uipanel0, ...
                'Tag', 'text20', ...
                'Position', [1 45 19.8333333333333 1.14285714285714], ...
                'String', 'Card Type', ...
                'HorizontalAlignment', 'left');
            
            
        end
        
        function create_edit_text()
            defaults = {'Style','edit','Units','characters','FontName','Helvetica','FontSize',10, 'BackgroundColor',[1 1 1], 'HorizontalAlignment','right'};
            handles.offset = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'offset', ...
                'Position', [11.4 19 12.8 1.46153846153846], ...
                'String', '0.0');
            
            handles.nbrSegments = uicontrol( defaults{:}, ...
                'Parent', handles.uipanel1, ...
                'Tag', 'nbrSegments', ...
                'Position', [30 12.9230769230769 12.8 1.53846153846154], ...
                'String', '1');
            
            handles.record_length = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'record_length', ...
                'Position', [30 21.7692307692308 12.8 1.46153846153846], ...
                'String', '10000');
            
            handles.delayTime = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'delayTime', ...
                'UserData', zeros(1,0), ...
                'Position', [30 18.8461538461538 12.8 1.46153846153846], ...
                'String', '0.0e-6');
            
            handles.sampleInterval = uicontrol( defaults{:},...
                'Parent', handles.uipanel1, ...
                'Tag', 'sampleInterval', ...
                'Position', [30 15.9230769230769 12.8 1.46153846153846], ...
                'String', '1e-9');
            
            handles.trigger_level = uicontrol( defaults{:},...
                'Parent', handles.uipanel2, ...
                'Tag', 'trigger_level', ...
                'Position', [2.4 3.92307692307693 20 1.69230769230769], ...
                'String', '500');
            
            handles.nbrWaveforms = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'nbrWaveforms', ...
                'Position', [2.66666666666667 7.24175824175824 20.1666666666667 1.42857142857143], ...
                'String', '10000');
            
            handles.nbrRoundRobins = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'nbrRoundRobins', ...
                'Position', [25.8333333333333 7.24175824175824 20 1.42857142857143], ...
                'String', '1');
            
            handles.ditherRange = uicontrol( defaults{:},...
                'Parent', handles.uipanel3, ...
                'Tag', 'ditherRange', ...
                'UserData', zeros(1,0), ...
                'Position', [25.6666666666667 4.24175824175824 20.3333333333333 1.42857142857143], ...
                'String', '0');
        end
        
        function create_popupmenus()
            
            %Create a cell-array of default parameters so that I don't have
            %to keep writing them out
            defaults = {'Style','popupmenu','Units','characters','FontName','Helvetica','FontSize',10,'BackgroundColor',[1 1 1]};
            handles.cardType = uicontrol( ...
                'Parent', handles.uipanel0, ...
                'Tag', 'cardType', ...
                'Position', [20 44 25 2], ...
                'String', {'Acqiris PT240', 'Alazar 9870'},...
                'Callback', @card_switch,...
                defaults{:});
            
            handles.acquire_mode = uicontrol( ...
                'Parent', handles.uipanel0, ...
                'Tag', 'acquire_mode', ...
                'Position', [20 41 25 2], ...
                defaults{:});
                       
            handles.trigger_ch = uicontrol( ...
                'Parent', handles.uipanel2, ...
                'Tag', 'trigger_ch', ...
                'Position', [26.2 0.923076923076925 20 1.69230769230769], ...
                defaults{:});
            
            handles.trigger_coupling = uicontrol( ...
                'Parent', handles.uipanel2, ...
                'Tag', 'trigger_coupling', ...
                'Position', [26.2 3.92307692307693 20 1.69230769230769], ...
                defaults{:});
            
            handles.trigger_slope = uicontrol( ...
                'Parent', handles.uipanel2, ...
                'Tag', 'trigger_slope', ...
                'Position', [2.4 0.923076923076925 20 1.69230769230769], ...
                defaults{:});
            
            % order scale choices by the numerical values
%             scaleNames = keys(scales);
%             [junk, scaleOrder] = sort(cell2mat(values(scales)));
            handles.vert_scale = uicontrol( ...
                'Parent', handles.uipanel1, ...
                'Tag', 'vert_scale', ...
                'Position', [3.83333333333333 21.7857142857143 20.1666666666667 1.64285714285714], ...
                defaults{:});
            
            handles.bandwidth = uicontrol( ...
                'Parent', handles.uipanel1, ...
                'Tag', 'bandwidth', ...
                'Position', [3.8 13.0769230769231 20.4 1.61538461538462], ...
                defaults{:});
            
            handles.vert_coupling = uicontrol( ...
                'Parent', handles.uipanel1, ...
                'Tag', 'vert_coupling', ...
                'Position', [4 16 20.2 1.61538461538462], ...
                defaults{:});
            
            handles.channel = uicontrol( ...
                'Parent', handles.uipanel1, ...
                'Tag', 'channel', ...
                'Position', [3.8 10.1538461538462 20.4 1.61538461538462], ...
                'String', {'Both','1','2'},...
                defaults{:});
            
            handles.clockType = uicontrol( ...
                'Parent', handles.uipanel3, ...
                'Tag', 'clockType', ...
                'Position', [2.83333333333333 4.09890109890109 20 1.71428571428571], ...
                defaults{:});
            
            handles.trigResync = uicontrol( ...
                'Parent', handles.uipanel3, ...
                'Tag', 'trigResync', ...
                'Position', [2.83333333333333 1.09890109890109 20 1.71428571428571], ...
                defaults{:});
            
        end
        
        
    end %build_gui function

%Helper function to get a drop-down menu selection.
    function selected = get_selected(hObject)
        menu = get(hObject,'String');
        selected = menu{get(hObject,'Value')};
    end

%Helper function to set a drop-down menu.
    function set_selected(hObject, val)
        menu = get(hObject, 'String');
        index = find(strcmp(val, menu));
        if ~isempty(index)
            set(hObject, 'Value', index);
        end
    end

%Main function returned which gets all the GUI settings.
    function scope_settings = get_settings()
        
        scope_settings = struct();
        
        scope_settings.deviceName = 'AgilentAP120';
        scope_settings.Address = 'PCI::INSTR0';
        
        % set card mode
        scope_settings.acquire_mode = cardModes(get_selected(handles.acquire_mode));
        scope_settings.clockType = clockTypes(get_selected(handles.clockType));
        
        % set horizontal settings
        horizSettings.delayTime = str2num(get(handles.delayTime, 'String'));
        horizSettings.sampleInterval = str2num(get(handles.sampleInterval, 'String'));
        %disp(horizSettings);
        scope_settings.horizontal = horizSettings;
        
        % set vertical settings
        vertSettings.vert_scale = scales(get_selected(handles.vert_scale));
        vertSettings.offset = str2num(get(handles.offset,'String'));
        vertSettings.vert_coupling = vert_couplings(get_selected(handles.vert_coupling));
        vertSettings.bandwidth = bandwidths(get_selected(handles.bandwidth));
        %disp(vertSettings);
        scope_settings.vertical = vertSettings;
        
        % set trigger settings
        trigSettings.trigger_level = str2num(get(handles.trigger_level,'String'));
        trigSettings.trigger_ch = trigChannels(get_selected(handles.trigger_ch));
        trigSettings.trigger_coupling = trigCouplings(get_selected(handles.trigger_coupling));
        trigSettings.trigger_slope = trigSlopes(get_selected(handles.trigger_slope));
        %disp(trigSettings);
        scope_settings.trigger = trigSettings;
        
        % set averager settings
        avgSettings.record_length = str2num(get(handles.record_length,'String'));
        avgSettings.nbrSegments = str2num(get(handles.nbrSegments,'String'));
        avgSettings.nbrWaveforms = str2num(get(handles.nbrWaveforms,'String'));
        avgSettings.nbrRoundRobins = str2num(get(handles.nbrRoundRobins,'String'));
        avgSettings.ditherRange = str2num(get(handles.ditherRange,'String'));
        avgSettings.trigResync = resyncs(get_selected(handles.trigResync));
        
        %disp(avgSettings);
        %scope_settings.channel_on = 1;
        scope_settings.averager = avgSettings;
    end

    %Function to set and load card specific options
    function card_switch(varargin)
        %Load which card we are using 
        curCard = get_selected(handles.cardType);
        switch curCard
            case 'Acqiris PT240'
                cardParams.cardModes = containers.Map({'Digitizer', 'Averager'}, {0, 2});
                cardParams.clockTypes = containers.Map({'Internal','External', 'Ext Ref (10 MHz)'}, {'int', 'ext', 'ref'});
                cardParams.scales = containers.Map({'50m','100m', '200m', '500m', '1', '2', '5'}, {.05, .1, .2, .5, 1, 2, 5});
                cardParams.vert_couplings = containers.Map({'Ground','DC, 1 MOhm','AC, 1 MOhm','DC, 50 Ohm','AC, 50 Ohm'}, ...
                            {0,1,2,3,4});
                cardParams.bandwidths = containers.Map({'no limit','700 MHz','200 MHz','35 MHz','25 MHz','20 MHz'}, ...
                            {0,2,3,5,1,4});
                cardParams.trigChannels = containers.Map({'External','Ch 1', 'Ch 2'}, {-1, 1, 2});
                cardParams.trigCouplings = containers.Map({'DC','AC','DC, 50 Ohm','AC, 50 Ohm'},{0,1,3,4});
                cardParams.trigSlopes = containers.Map({'Rising','Falling'},{0,1});
                cardParams.resyncs = containers.Map({'Resync','No resync'},{1,0});
            case 'Alazar 9870'
                %TODO: update with actual Alazar values
                cardParams.cardModes = containers.Map({'Digitizer', 'Averager'}, {0, 2});
                cardParams.clockTypes = containers.Map({'Internal','External', 'Ext Ref (10 MHz)'}, {'int', 'ext', 'ref'});
                cardParams.scales = containers.Map({'50m','100m', '200m', '500m', '1', '2', '5'}, {.05, .1, .2, .5, 1, 2, 5});
                cardParams.vert_couplings = containers.Map({'Ground','DC, 1 MOhm','AC, 1 MOhm','DC, 50 Ohm','AC, 50 Ohm'}, ...
                            {0,1,2,3,4});
                cardParams.bandwidths = containers.Map({'no limit','700 MHz','200 MHz','35 MHz','25 MHz','20 MHz'}, ...
                            {0,2,3,5,1,4});
                cardParams.trigChannels = containers.Map({'External','Ch 1', 'Ch 2'}, {-1, 1, 2});
                cardParams.trigCouplings = containers.Map({'DC','AC','DC, 50 Ohm','AC, 50 Ohm'},{0,1,3,4});
                cardParams.trigSlopes = containers.Map({'Rising','Falling'},{0,1});
                cardParams.resyncs = containers.Map({'Resync','No resync'},{1,0});
        end
        
        set_gui_elements(settings)
        
    end
        
    function set_gui_elements(settings)
        % define default values for fields. If given a settings structure, grab
        % defaults from it
        defaults = struct();
        defaults.acquire_mode = 'Averager';
        defaults.clockType = 'Ext Ref (10 MHz)';
        defaults.horizontal.delayTime = 0;
        defaults.horizontal.sampleInterval = 1e-9;
        defaults.vertical.vert_scale = '500m';
        defaults.vertical.offset = 0;
        defaults.vertical.vert_coupling = 'DC, 50 Ohm';
        defaults.vertical.bandwidth = 'no limit';
        defaults.trigger.trigger_level = 500;
        defaults.trigger.trigger_ch = 'External';
        defaults.trigger.trigger_coupling = 'DC';
        defaults.trigger.trigger_slope = 'Rising';
        defaults.averager.record_length = 10000;
        defaults.averager.nbrSegments = 1;
        defaults.averager.nbrWaveforms = 1000;
        defaults.averager.nbrRoundRobins = 1;
        defaults.averager.ditherRange = 0;
        defaults.averager.trigResync = 'Resync';
        
        % construct inverse maps
        cardModesInv = invertMap(cardParams.cardModes);
        clockTypesInv = invertMap(cardParams.clockTypes);
        scalesInv = invertMap(cardParams.scales);
        vert_couplingsInv = invertMap(cardParams.vert_couplings);
        bandwidthsInv = invertMap(cardParams.bandwidths);
        trigChannelsInv = invertMap(cardParams.trigChannels);
        trigCouplingsInv = invertMap(cardParams.trigCouplings);
        trigSlopesInv = invertMap(cardParams.trigSlopes);
        resyncsInv = invertMap(cardParams.resyncs);
        % scope settings are two layers deep, need to go into horizontal,
        % vertical, trigger, and averager
        if ~isempty(fieldnames(settings))
            defaults.acquire_mode = cardModesInv(settings.acquire_mode);
            defaults.clockType = clockTypesInv(settings.clockType);
            % horizontal
            defaults.horizontal.delayTime = settings.horizontal.delayTime;
            defaults.horizontal.sampleInterval = settings.horizontal.sampleInterval;
            % vertical
            defaults.vertical.vert_scale = scalesInv(settings.vertical.vert_scale);
            defaults.vertical.offset = settings.vertical.offset;
            defaults.vertical.vert_coupling = vert_couplingsInv(settings.vertical.vert_coupling);
            defaults.vertical.bandwidth = bandwidthsInv(settings.vertical.bandwidth);
            % trigger
            defaults.trigger.trigger_level = settings.trigger.trigger_level;
            defaults.trigger.trigger_ch = trigChannelsInv(settings.trigger.trigger_ch);
            defaults.trigger.trigger_coupling = trigCouplingsInv(settings.trigger.trigger_coupling);
            defaults.trigger.trigger_slope = trigSlopesInv(settings.trigger.trigger_slope);
            % averaging
            defaults.averager.record_length = settings.averager.record_length;
            defaults.averager.nbrSegments = settings.averager.nbrSegments;
            defaults.averager.nbrWaveforms = settings.averager.nbrWaveforms;
            defaults.averager.nbrRoundRobins = settings.averager.nbrRoundRobins;
            defaults.averager.ditherRange = settings.averager.ditherRange;
            defaults.averager.trigResync = resyncsInv(settings.averager.trigResync);
        end
        
        % depth first traversal of defaults using a stack
        s = stack();
        % push a cell array of the name and defaults onto the stack
        s.push({'' defaults});
        
        while ~s.isempty()
            u = s.pop();
            name = u{1};
            value = u{2};
            
            % if current element is itself a struct, add all its children to the
            % stack
            if isstruct(value)
                elementNames = fieldnames(value);
                len = numel(elementNames);
                for i = len:-1:1
                    s.push( {elementNames{i} value.(elementNames{i})} );
                end
            elseif isfield(handles, name)
                % strip everything before the last dot to get the handle
                switch get(handles.(name), 'Style')
                    case 'edit'
                        set(handles.(name), 'String', num2str(value));
                    case 'popupmenu'
                        %Set the allowable values
                        set(handles.(name), 'String', keys(cardParams.(cardParamsUIDict(name))))
                        set_selected(handles.(name), value);
                    case 'checkbox'
                        set(handles.(name), 'Value', value);
                    case 'radiobutton'
                        set(handles.(name), 'Value', value);
                    otherwise
                        warning('unknown handle type');
                end
            end
        end
        
    end %set_gui_elements

end %total function
